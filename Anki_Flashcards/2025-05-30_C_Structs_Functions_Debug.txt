**C Structs:** What is a `struct` in C, and what is its primary purpose?	A `struct` (structure) is a **user-defined data type** that allows you to **group together related data items of *different* data types** under a single name. Its purpose is to create complex, custom data types to model real-world entities (e.g., a Player, Item).
**C Structs:** How do you declare a variable of a `struct` type, and how do you access its members?	Declare with `struct StructName variableName;` (e.g., `struct GameCharacter hero;`). Access members using the **dot operator (`.`)** (e.g., `hero.health`).
**C `void` Functions:** What error occurs if a `void` function tries to use a `return` statement with a value (e.g., `return 0;`)?	A **'return' with a value, in function returning void [-Wreturn-mismatch]** error occurs. `void` functions are not meant to return values.
**C Best Practices:** Why is it best practice to give a compiled C executable a different name than its source `.c` file (e.g., `gcc main.c -o my_program` instead of `gcc main.c -o main.c`)?	For clarity (distinguishes source from executable), to avoid accidentally overwriting the source code, and because it's standard convention.
**C Structs vs. Strings:** What is the key difference between a `struct` and a C `string` (`char` array)?	A **`struct` groups data items of *different types*** (e.g., `name` (string), `health` (int)). A C **`string` is an array of `char` characters** (all same type) terminated by `\0`, primarily for text. A `struct` can *contain* strings.